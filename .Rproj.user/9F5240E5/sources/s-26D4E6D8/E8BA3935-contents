---
title: "import-scheduler"
output: html_document
---

```{r}
library(plotly)
library(htmltools)
library(htmlwidgets)
library(sf)
library(dplyr)
library(DT)
library(crosstalk)
```

```{r}
USA <- "C:\\Users\\JosephDuffey\\OneDrive - Healthlink Dimensions\\Documents\\code\\Shawn Projects\\Import Scheduler\\jduffey7.github.io\\files\\States_shapefile.shp"
usa_map <- st_read(USA, quiet = TRUE)
usa_map <- left_join(usa_map, test_widget_1, by = c("State_Code" = "State"))
```
test below
```{r}
usa_map$test <- 0*1:length(usa_map$State_Code)
for (i in 1:12)
{
  if (i <= 7)
  {
    #increment by 3
    index <- (3*i - 2):(3*i)
    usa_map$test[index] <- i
  }
  else 
  {
    #increment by 6, subtract the extra 21
    #extra 21 because on iter 8 the last number run was 7 so you need to start on 3*7 + 1
    # when you do 6*8 - 5 that starts you on 6*7 + 1, you subtract the 21 so it becomes (6-3)*7 + 1
    index <- (6*i - 5 - 21):(6*i - 21)
    usa_map$test[index] <- i
  }
}

#tsd <- SharedData$new(usa_map)
tsd <- usa_map %>% 
  highlight_key(~test)
```

```{r}
base <- rep("grey", 52)
January <- rep("grey", 52)
February <- rep("grey", 52)
March <- rep("grey", 52)
April <- rep("grey", 52)
May <- rep("grey", 52)
June <- rep("grey", 52)
July <- rep("grey", 52)
August <- rep("grey", 52)
September <- rep("grey", 52)
October <- rep("grey", 52)
November <- rep("grey", 52)
December <- rep("grey", 52)

December[1:3+1] <- "red"
November[4:6+1] <- "red"
October[7:9+1] <- "red"
September[10:12+1] <- "red"
August[13:15+1] <- "red"
July[16:18+1] <- "red"
June[19:21+1] <- "red"
May[22:27+1] <- "red"
April[28:33+1] <- "red"
March[34:39+1] <- "red"
February[40:45+1] <- "red"
January[46:51+1] <- "red"
```

```{r}
updatemenus1 <- list(
  list(
    y = 0.7,
    buttons = list(
      list(
        label = "---",
        method = "restyle",
        args = list("fillcolor", base)),
      list(
        label = "Jan",
        method = "restyle",
        args = list("fillcolor", January)),
      list(
        label = "Feb",
        method = "restyle",
        args = list("fillcolor", February)),
      list(
        label = "Mar",
        method = "restyle",
        args = list("fillcolor", March)),
      list(
        label = "Apr",
        method = "restyle",
        args = list("fillcolor", April)),
      list(
        label = "May",
        method = "restyle",
        args = list("fillcolor", May)),
      list(
        label = "June",
        method = "restyle",
        args = list("fillcolor", June)),
      list(
        label = "July",
        method = "restyle",
        args = list("fillcolor", July)),
      list(
        label = "Aug",
        method = "restyle",
        args = list("fillcolor", August)),
      list(
        label = "Sep",
        method = "restyle",
        args = list("fillcolor", September)),
      list(
        label = "Oct",
        method = "restyle",
        args = list("fillcolor", October)),
      list(
        label = "Nov",
        method = "restyle",
        args = list("fillcolor", November)),
      list(
        label = "Dec",
        method = "restyle",
        args = list("fillcolor", December))))
)


```

```{r}
cols <- c("1" = "grey",
          "2" = "grey",
          "3" = "grey",
          "4" = "grey",
          "5" = "grey",
          "6" = "grey",
          "7" = "grey",
          "8" = "grey",
          "9" = "grey",
          "10" = "grey",
          "11" = "grey",
          "12" = "grey")
map_theme<-theme(axis.line=element_blank(), axis.text.x=element_blank(),
                 axis.text.y=element_blank(), axis.ticks=element_blank(),
                 axis.title.x=element_blank(),
                 #legend.position = "none",
                 axis.title.y=element_blank(),
                 panel.background = element_rect(fill = "transparent", color = NA),
                 #panel.background=element_blank(), 
                 panel.border=element_blank(),
                 panel.grid.major=element_blank(),
                 panel.grid.minor=element_blank(), #plot.background=element_blank(),
                 plot.background = element_rect(fill = "transparent", color = NA))

consumer_map <- ggplot() + geom_sf(data = tsd, aes(geometry = geometry, 
                                                       fill = factor(test),
                                                       color = State_Name,
                                                       text = paste(test, State_Code))) + 
  coord_sf(xlim = c(-125, -65), ylim = c(24, 50), expand = FALSE) +
  scale_fill_manual(values = cols) +
  map_theme +
  ggtitle("Select the Month and then click a highlighted state \ndouble click to reset the table")
gg_2 <- ggplotly(consumer_map, tooltip = "text")
gg_2 <- gg_2 %>%
  style(hoveron = "fills",
        line.color = toRGB("gray40"),
        traces = seq.int(2, length(gg_2$x$data))) %>% hide_legend()
gg_2 <- gg_2 %>% layout(updatemenus = updatemenus1)
gg_2 <- gg_2 %>% highlight(defaultValues = c(1:12),
                           opacityDim = 1)
gg_2
#save_html(gg_2, "map.html")
```

```{r}
#save_html(
bscols(
  gg_2,
  datatable(tsd,
            options = list(columnDefs = list(list(visible=FALSE, 
                                                  targets=c(1, 2, 4, 5, 6, 11, 12)))))
)
#, "test1.html")
```